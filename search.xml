<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>docker</title>
      <link href="/2020/07/26/docker/"/>
      <url>/2020/07/26/docker/</url>
      
        <content type="html"><![CDATA[<h1 id="docker笔记"><a href="#docker笔记" class="headerlink" title="docker笔记"></a>docker笔记</h1><blockquote><p>docker开箱即用教程</p></blockquote><p><img src="docker/1595388343795.png" alt="1595388343795"></p><h2 id="一：镜像命令"><a href="#一：镜像命令" class="headerlink" title="一：镜像命令"></a>一：镜像命令</h2><h5 id="1-1镜像搜索命令"><a href="#1-1镜像搜索命令" class="headerlink" title="1.1镜像搜索命令"></a><strong>1.1镜像搜索命令</strong></h5><pre class=" language-shell"><code class="language-shell">docker search mysqldocker search tomcat#条件过滤--filter=STARS=3000   #显示出镜像大于3000stars的镜像</code></pre><h5 id="1-2镜像拉取命令"><a href="#1-2镜像拉取命令" class="headerlink" title="1.2镜像拉取命令"></a><strong>1.2镜像拉取命令</strong></h5><pre class=" language-shell"><code class="language-shell">docker pull mysql      #默认拉取最新docker pull mysql:5.7  #拉取指定版本</code></pre><h5 id="1-3查看镜像列表命令"><a href="#1-3查看镜像列表命令" class="headerlink" title="1.3查看镜像列表命令"></a><strong>1.3查看镜像列表命令</strong></h5><pre class=" language-shell"><code class="language-shell">docker images REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZEdocker.io/tomcat                latest              df72227b40e1        4 days ago          647 MBdocker.io/nginx                 latest              0901fa9da894        10 days ago         132 MBdocker.io/centos                latest              831691599b88        4 weeks ago         215 MBdocker.io/portainer/portainer   latest              cd645f5a4769        7 weeks ago         79.1 MB#可选项-a                    #列出所有镜像-q                    #只显示镜像id</code></pre><h5 id="1-4镜像删除命令"><a href="#1-4镜像删除命令" class="headerlink" title="1.4镜像删除命令"></a>1.4镜像删除命令</h5><pre class=" language-shell"><code class="language-shell">docker rmi 镜像id               # 删除指定镜像iddocker rmi -f 镜像id   镜像id    #删除多个镜像iddocker rmi -f $(docker images -aq) #删除全部镜像</code></pre><h2 id="二：容器命令"><a href="#二：容器命令" class="headerlink" title="二：容器命令"></a>二：容器命令</h2><h5 id="2-1新建容器并启动"><a href="#2-1新建容器并启动" class="headerlink" title="2.1新建容器并启动"></a>2.1新建容器并启动</h5><pre class=" language-shell"><code class="language-shell">docker run [可选参数] image#参数说明--name=Name     #tomcat01-d             后台运行-it            交互方式-p             指定容器端口     -p  主机端口：容器端口#举例     docker run  -it --name tomcat01 -p 8080:8080 /bin/bash tomcat   exit or ctrl+p+q   #退出容器curl localhost:8080   #验证</code></pre><h5 id="2-2列出所有运行的容器"><a href="#2-2列出所有运行的容器" class="headerlink" title="2.2列出所有运行的容器"></a>2.2列出所有运行的容器</h5><pre class=" language-shell"><code class="language-shell">docker ps CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES511dbff0266e        tomcat              "catalina.sh run"   8 minutes ago       Up 8 minutes        0.0.0.0:9100->8080/tcp   tomcat0300ccb63994ec        tomcat              "catalina.sh run"   9 minutes ago       Up 9 minutes        8080/tcp                 tomcat02docker ps -a</code></pre><h5 id="2-3运行停止容器"><a href="#2-3运行停止容器" class="headerlink" title="2.3运行停止容器"></a>2.3运行停止容器</h5><pre class=" language-shell"><code class="language-shell">docker stop 容器iddocker start 容器id</code></pre><h5 id="2-4其他常用命令"><a href="#2-4其他常用命令" class="headerlink" title="2.4其他常用命令"></a>2.4其他常用命令</h5><h6 id="2-4-1查看日志"><a href="#2-4-1查看日志" class="headerlink" title="2.4.1查看日志"></a>2.4.1查看日志</h6><pre class=" language-shell"><code class="language-shell">docker logs -f -t --tail 10 容器id#查看日志需要一个前台进程 否则没有日志#自己编写shell脚本docker run -d centos /bin/bash -c "while true;do echo njq;sleep 1;done"</code></pre><h6 id="2-4-2查看容器进程中的信息"><a href="#2-4-2查看容器进程中的信息" class="headerlink" title="2.4.2查看容器进程中的信息"></a>2.4.2查看容器进程中的信息</h6><pre class=" language-she"><code class="language-she">docker top 容器id</code></pre><h6 id="2-4-3进入容器"><a href="#2-4-3进入容器" class="headerlink" title="2.4.3进入容器"></a>2.4.3进入容器</h6><pre class=" language-shell"><code class="language-shell">docker exec -it nginx（容器id） /bin/bash      #进入一个新的终端   docker attach -it nginx /bin/bash             #进入当前终端</code></pre><h6 id="2-4-4删除容器"><a href="#2-4-4删除容器" class="headerlink" title="2.4.4删除容器"></a>2.4.4删除容器</h6><pre class=" language-shell"><code class="language-shell">docker rm 容器id</code></pre><h5 id="2-5commit镜像"><a href="#2-5commit镜像" class="headerlink" title="2.5commit镜像"></a>2.5commit镜像</h5><pre class=" language-shell"><code class="language-shell">docker commit 提交镜像#git类似docker commit -m="  "  -a="author"</code></pre><pre class=" language-shell"><code class="language-shell">#实战小例子[root@iZbp1gvmnu91bwmymqe146Z ~]# docker run -d --name tomcat03 -p 9100:8080  tomcat511dbff0266e29e3edcd154bd21cb36a7c18abb5ee390fe787e69a33637150ae[root@iZbp1gvmnu91bwmymqe146Z ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED              STATUS              PORTS                    NAMES511dbff0266e        tomcat              "catalina.sh run"   3 seconds ago        Up 2 seconds        0.0.0.0:9100->8080/tcp   tomcat0300ccb63994ec        tomcat              "catalina.sh run"   About a minute ago   Up About a minute   8080/tcp                 tomcat02[root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it 511dbff0266e /bin/bashroot@511dbff0266e:/usr/local/tomcat# lsBUILDING.txt     LICENSE  README.md     RUNNING.txt  conf  logs        temp     webapps.distCONTRIBUTING.md  NOTICE   RELEASE-NOTES  bin          lib   native-jni-lib  webapps  workroot@511dbff0266e:/usr/local/tomcat# cd webappsroot@511dbff0266e:/usr/local/tomcat/webapps# cd ../root@511dbff0266e:/usr/local/tomcat# cp -r webapps.dist/* webapps[root@iZbp1gvmnu91bwmymqe146Z ~]# curl localhost:9100<!DOCTYPE html><html lang="en">    <head>        <meta charset="UTF-8" />        <title>Apache Tomcat/9.0.37</title>        <link href="favicon.ico" rel="icon" type="image/x-icon" />        <link href="favicon.ico" rel="shortcut icon" type="image/x-icon" />        <link href="tomcat.css" rel="stylesheet" type="text/css" />    </head>     ....[root@iZbp1gvmnu91bwmymqe146Z ~]# docker psCONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                    NAMES511dbff0266e        tomcat              "catalina.sh run"   8 minutes ago       Up 8 minutes        0.0.0.0:9100->8080/tcp   tomcat0300ccb63994ec        tomcat              "catalina.sh run"   9 minutes ago       Up 9 minutes        8080/tcp                 tomcat02[root@iZbp1gvmnu91bwmymqe146Z ~]# docker commit -a="njq" -m="add webapps app" 511dbff0266e tomcat03:v1.0sha256:e0a7f520cbb2399abd3595d59edb89a1ec8ca5b83a3fc678d40ef39afc026b7e[root@iZbp1gvmnu91bwmymqe146Z ~]# docker imagesREPOSITORY            TAG                 IMAGE ID            CREATED             SIZEtomcat03              v1.0                e0a7f520cbb2        8 seconds ago       652MBtomcat                latest              df72227b40e1        4 days ago          647MBtomcat                latest              df72227b40e1        4 days ago          647MBnginx                 latest              0901fa9da894        10 days ago         132MBcentos                latest              831691599b88        4 weeks ago         215MBportainer/portainer   latest              cd645f5a4769        7 weeks ago         79.1MB</code></pre><p><img src="docker/1595388421247.png" alt="1595388421247"></p><h5 id="2-6小结"><a href="#2-6小结" class="headerlink" title="2.6小结"></a>2.6小结</h5><pre class=" language-shell"><code class="language-shell">docker   # docker 命令帮助Commands:    attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像    build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像    commit    Create a new image from a container's changes # 提交当前容器为新的镜像    cp        Copy files/folders from the containers filesystem to the host path              # 从容器中拷贝指定文件或者目录到宿主机中    create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器    diff      Inspect changes on a container's filesystem   # 查看 docker 容器变化    events    Get real time events from the server          # 从 docker 服务获取容器实时事件    exec      Run a command in an existing container        # 在已存在的容器上运行命令    export    Stream the contents of a container as a tar archive                 # 导出容器的内容流作为一个 tar 归档文件[对应 import ]    history   Show the history of an image                  # 展示一个镜像形成历史    images    List images                                   # 列出系统当前镜像    import    Create a new filesystem image from the contents of a tarball                # 从tar包中的内容创建一个新的文件系统映像[对应 export]    info      Display system-wide information               # 显示系统相关信息    inspect   Return low-level information on a container   # 查看容器详细信息    kill      Kill a running container                      # kill 指定 docker 容器    load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]    login     Register or Login to the docker registry server                 # 注册或者登陆一个 docker 源服务器    logout    Log out from a Docker registry server         # 从当前 Docker registry 退出    logs      Fetch the logs of a container                 # 输出当前容器日志信息    port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT              # 查看映射端口对应的容器内部源端口    pause     Pause all processes within a container        # 暂停容器    ps        List containers                               # 列出容器列表    pull      Pull an image or a repository from the docker registry server              # 从docker镜像源服务器拉取指定镜像或者库镜像    push      Push an image or a repository to the docker registry server              # 推送指定镜像或者库镜像至docker源服务器    restart   Restart a running container                   # 重启运行的容器    rm        Remove one or more containers                 # 移除一个或者多个容器    rmi       Remove one or more images                               # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]    run       Run a command in a new container              # 创建一个新的容器并运行一个命令    save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]    search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像    start     Start a stopped containers                    # 启动容器    stop      Stop a running containers                     # 停止容器    tag       Tag an image into a repository                # 给源中镜像打标签    top       Lookup the running processes of a container   # 查看容器中运行的进程信息    unpause   Unpause a paused container                    # 取消暂停容器    version   Show the docker version information           # 查看 docker 版本号    wait      Block until a container stops, then print its exit code                 # 截取容器停止时的退出状态值</code></pre><h2 id="三：docker-数据卷"><a href="#三：docker-数据卷" class="headerlink" title="三：docker 数据卷"></a>三：docker 数据卷</h2><blockquote><p>什么是容器数据卷？</p></blockquote><p>将应用和环境打包成一个镜像！</p><p>如果数据在容器中。那我们删除容器。数据就会丢失  ==需求：数据可持续化==</p><p>MYSQL 容器删除 ，删库跑路  ==MYSQL数据可以存储在本地==</p><p>将容器数据同步到本地</p><p>将容器内目录挂载在linux</p><p><strong>容器的可持续化和同步操作！荣器间是可以数据共享的</strong></p><h4 id="3-1使用数据卷"><a href="#3-1使用数据卷" class="headerlink" title="3.1使用数据卷"></a>3.1使用数据卷</h4><blockquote><p>方式一：直接使用命令挂载 -v</p></blockquote><pre class=" language-shell"><code class="language-shell">docker run -it -v 主机目录：容器目录  centos /bin/bash #测试 docker run -it -v /home/ceshi:/home cnetos /bin/bash#查看容器信息docker inspect 容器id</code></pre><p><img src="docker/1595388573846.png" alt="1595388573846"></p><p><strong>测试是否挂载成功</strong></p><p>截图丢失，不影响</p><blockquote><p>总结：使用数据卷技术两边数据保持同步，停止容器数据不会丢失。</p></blockquote><h4 id="3-2实战mysql数据卷挂载"><a href="#3-2实战mysql数据卷挂载" class="headerlink" title="3.2实战mysql数据卷挂载"></a>3.2实战mysql数据卷挂载</h4><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z home]# lsceshi  houduan  ruoyi  softwares  test[root@iZbp1gvmnu91bwmymqe146Z home]# docker run -d -p 9008:3306 -v /home/mysql/conf:/etc/mysql/conf.d -v /home/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 --name mysql01 mysql:5.7624759f3d10f3f0727761ded42fcdf3375e94367d58e35ef40a9347e7eb488c2</code></pre><p><strong>测试连接</strong></p><p>使用navicat测试连接是否成功</p><h4 id="3-3具名和匿名下载"><a href="#3-3具名和匿名下载" class="headerlink" title="3.3具名和匿名下载"></a>3.3具名和匿名下载</h4><pre class=" language-shell"><code class="language-shell"> #匿名挂载-v 容器内路径-P(大写) 随机分配指定端口docker run -d -p --name nginx01 -v /etc/nginx nginx[root@iZbp1gvmnu91bwmymqe146Z data]# docker volume lsDRIVER              VOLUME NAMElocal               a5e2113e8294a54e3bb8bcd73adff2058d361b6acdcf151d53a08bd5b0de6551local               juming-nginx#具名挂载[root@iZbp1gvmnu91bwmymqe146Z data]# docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx nginxUnable to find image 'nginx:latest' locallylatest: Pulling from library/nginxDigest: sha256:a93c8a0b0974c967aebe868a186e5c205f4d3bcb5423a56559f2f9599074bbcdStatus: Downloaded newer image for nginx:latestecf969f2d75c7befb25b1bc628a497f4394f24250a5492c6a47367a9ed776642[root@iZbp1gvmnu91bwmymqe146Z data]# docker volume lsDRIVER              VOLUME NAMElocal               juming-nginx#通过  -v  卷名：容器内路径#查看一下这个卷         </code></pre><blockquote><p>一般没有指定的情况下，默认路径<code>/var/lib/docker/volumes/XXXX/_data</code></p><p>我们通过具名挂载方便找到一个卷 ，大多数情况下在使用<code>具名挂载</code></p></blockquote><pre class=" language-shell"><code class="language-shell">#如何确定具名挂载还是匿名挂载还是指定路径挂载-v  容器路径-v  容器名称：容器路径      #具名挂载 -v /宿主机路径：容器路径     #指定挂载</code></pre><pre class=" language-shell"><code class="language-shell">#扩展# ro      readonly# rw      readwrite# - 旦这个了设置了容器权限，容器对我们挂载出来的内容就有限定了! docker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:ro nginxdocker run -d -P --name nginx02 -v juming-nginx:/etc/nginx:rw nginx# ro只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作! </code></pre><h4 id="3-4初识dockerfile"><a href="#3-4初识dockerfile" class="headerlink" title="3.4初识dockerfile"></a>3.4初识dockerfile</h4><p>Dockerfile就是用来构建docker镜像的构建文件!令脚本!先体验一下!<br>通过这个脚本可以生成镜像,镜像是一层-层的,脚本-个个的命令,每个命令都是一层!</p><pre class=" language-shell"><code class="language-shell">#创建一个dockerfile文件，名字可以随机建议Dockerfile#文件中的内容指令(大写) 参数FROM centosVOLUME ["volume01" ，"volume02"]CMD  echo "----end-----"CMD /bin/bash#这里的每个命令，就是镜像的一层!</code></pre><pre class=" language-shell"><code class="language-shell"># 1.执行[root@MiWiFi-R3G-srv ~]# cd /home[root@MiWiFi-R3G-srv home]# mkdir dokcer-test-volume[root@MiWiFi-R3G-srv home]# docker build -f dockerfile1 -t xyh/centos:1.0 .Sending build context to Docker daemon   2.56kBStep 1/4 : FROM centos ---> 470671670cacStep 2/4 : VOLUME ["volume01","volume02"] ---> Running in df1ef5caf70dRemoving intermediate container df1ef5caf70d ---> 56a18cde330bStep 3/4 : CMD echo "-----end-----" ---> Running in 1f220ca56d03Removing intermediate container 1f220ca56d03 ---> 69071f35ddb8Step 4/4 : CMD /bin/bash ---> Running in 8f8249f04322Removing intermediate container 8f8249f04322 ---> 13881e3e2484Successfully built 13881e3e2484Successfully tagged xyh/centos:1.0[root@MiWiFi-R3G-srv home]# # 启动自己写的容器</code></pre><blockquote><p>上述volume01 volume02 为匿名挂载  在之前目录下有对应文件</p></blockquote><h4 id="3-5数据卷容器"><a href="#3-5数据卷容器" class="headerlink" title="3.5数据卷容器"></a>3.5数据卷容器</h4><p>实现多个mysql 数据同步！</p><pre class=" language-shell"><code class="language-shell">docker run -it --name docker01 kuangshen/ centos: 1.0docker run -it --name docker02 --volumes-form docker01 kuangshen/centos:1.0</code></pre><p>图片丢失，后期会补</p><h2 id="四：DockerFile"><a href="#四：DockerFile" class="headerlink" title="四：DockerFile"></a>四：DockerFile</h2><h4 id="dockerfile介绍"><a href="#dockerfile介绍" class="headerlink" title="dockerfile介绍"></a>dockerfile介绍</h4><p>dockerfile 是用来构建docker镜像的文件！命令参数脚本！</p><p>构建步骤：</p><p>1：编写一个dockerfile 文件</p><p>2：docker bulid 构建成为一个镜像</p><p>3：docker run 运行</p><p>4：docker push 发布步骤（DockerHub ,阿里云镜像仓库）</p><h4 id="dockerfile构建过程"><a href="#dockerfile构建过程" class="headerlink" title="dockerfile构建过程"></a>dockerfile构建过程</h4><p><strong>基础知识</strong></p><p>1、每个保留关键字(指令)都是必须是大写字母<br>2、执行从上到下顺序执行<br>3、#示注释<br>4、每一个指令都会创建提交一个新的镜像层,并提交!|</p><p><img src="docker/1595388712000.png" alt="1595388712000"></p><p><strong>dockerfile</strong>是面向开发的,我们以后要发布项目,做镜像 ,就需要编写dockerfile文件,这个文件十分简单!<br>Docker镜像逐渐成为企业交付的标准,必须要掌握!</p><h4 id="docerfile指令"><a href="#docerfile指令" class="headerlink" title="docerfile指令"></a>docerfile指令</h4><pre class=" language-shell"><code class="language-shell">FROM        #基础镜像，一切从这里开始构建MAINTAINER  #镜像谁写的，姓名加邮箱RUN         #镜像构建时需要的运行命令ADD         #步操: tomcat镜像，这个tomcat压缩包!称加门台WORKDIR     #镜像的工作目录VOLUME      #挂载的目录EXPOSE      #暴露端口配置CMD         #指定这个容器启动的时候要运行的命令,只有最后一个会生效，可被替代ENTRYPOINT  #指定这个容器启动的时候要运行的命令，可以追加命令ONBUILD     #当构建一个被继承DockerFile 这个时候就会运行ONBUILD 的指令。触友指令。COPY        #类似ADD，将我们文件拷贝到镜像中ENV         #构建的时候设置环境变量!</code></pre><p><img src="docker/1595388658499.png" alt="1595388658499"></p><h4 id="实战测试"><a href="#实战测试" class="headerlink" title="实战测试"></a>实战测试</h4><h6 id="创建自己的centos"><a href="#创建自己的centos" class="headerlink" title="创建自己的centos"></a>创建自己的centos</h6><pre class=" language-shell"><code class="language-shell">#第一步[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# cat mydockerfile-centos FROM centosMAINTAINER niejinquan<2224745431@qq.com>ENV MYPATH /usr/localWORKDIR $MYPATHRUN yum -y install vim RUN yun -y install net-toolsEXPOSE 81CMD echo $MYPATHCMD echo "---end---"CMD /bin/bash#第二步docker bulid -f dockerfile文件名 -t 镜像名：[tag][root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker build -f  mydockerfile-centos -t mycentos:0.1 .Sending build context to Docker daemon  2.048kBStep 1/10 : FROM centos ---> 831691599b88Step 2/10 : MAINTAINER niejinquan<2224745431@qq.com> ---> Using cache ---> 8fa3ad8b2bc2Step 3/10 : ENV MYPATH /usr/local ---> Using cache ---> eba3edf5ad82Step 4/10 : WORKDIR $MYPATH ---> Using cache ---> 7417d18bfeb6Step 5/10 : RUN yum -y install vim ---> Using cache ---> f9bb144d71f6Step 6/10 : RUN yum -y install net-tools ---> Running in 68112b7ddd4e ...Successfully built 5c9032e0cd7fSuccessfully tagged mycentos:0.1</code></pre><p><img src="docker/1595390522663.png" alt="1595390522663"></p><blockquote><p>docker history 镜像id   #查看镜像构建过程</p></blockquote><p><img src="docker/1595390751168.png" alt="1595390751168"></p><blockquote><p>CMD 和 ENTRYPOINT 区别</p></blockquote><pre class=" language-shell"><code class="language-shell">CMD         #指定这个容器启动的时候要运行的命令,只有最后一个会生效，可被替代ENTRYPOINT  #指定这个容器启动的时候要运行的命令，可以追加命令</code></pre><p>测试CMD</p><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# vim mydockerfile-testFROM centosCMD ["ls","-a"][root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker build -f  mydockerfile-test -t centostest ....Successfully built dce259bbb2cfSuccessfully tagged centostest:latest[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker run dce259bbb2cf....dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrun#追加一个命令  ls  -al[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker run dce259bbb2cf -ldocker: Error response from daemon: OCI runtime create failed: container_linux.go:349: starting container process caused "exec: \"-l\": executable file not found in $PATH": unknown.#报错因为 -l 直接替换["ls","-a"]  -l所以报错 </code></pre><p>测试ENTRYPOINT</p><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# vim dockerfile-entrypointFROM centosENTRYPOINT ["ls","-a"][root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker build -f dockerfile-entrypoint -t entrypoint-test .Sending build context to Docker daemon  4.096kBStep 1/2 : FROM centos ---> 831691599b88Step 2/2 : ENTRYPOINT ["ls","-a"] ---> Running in a57dc3c134aeRemoving intermediate container a57dc3c134ae ---> dc425ff8735eSuccessfully built dc425ff8735eSuccessfully tagged entrypoint-test:latest[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker run dc425ff8735e....dockerenvbindevetchomeliblib64lost+foundmediamntoptprocrootrunsbinsrvsystmpusrvar[root@iZbp1gvmnu91bwmymqe146Z dockerfile]# docker run dc425ff8735e -ltotal 56drwxr-xr-x  1 root root 4096 Jul 22 07:50 .drwxr-xr-x  1 root root 4096 Jul 22 07:50 ..-rwxr-xr-x  1 root root    0 Jul 22 07:50 .dockerenvlrwxrwxrwx  1 root root    7 May 11  2019 bin -> usr/bindrwxr-xr-x  5 root root  340 Jul 22 07:50 devdrwxr-xr-x  1 root root 4096 Jul 22 07:50 etcdrwxr-xr-x  2 root root 4096 May 11  2019 homelrwxrwxrwx  1 root root    7 May 11  2019 lib -> usr/liblrwxrwxrwx  1 root root    9 May 11  2019 lib64 -> usr/lib64drwx------  2 root root 4096 Jun 11 02:35 lost+founddrwxr-xr-x  2 root root 4096 May 11  2019 mediadrwxr-xr-x  2 root root 4096 May 11  2019 mntdrwxr-xr-x  2 root root 4096 May 11  2019 optdr-xr-xr-x 97 root root    0 Jul 22 07:50 procdr-xr-x---  2 root root 4096 Jun 11 02:35 rootdrwxr-xr-x 11 root root 4096 Jun 11 02:35 runlrwxrwxrwx  1 root root    8 May 11  2019 sbin -> usr/sbindrwxr-xr-x  2 root root 4096 May 11  2019 srvdr-xr-xr-x 13 root root    0 Apr 11  2018 sysdrwxrwxrwt  7 root root 4096 Jun 11 02:35 tmpdrwxr-xr-x 12 root root 4096 Jun 11 02:35 usrdrwxr-xr-x 20 root root 4096 Jun 11 02:35 var</code></pre><h6 id="创建自己的tomcat"><a href="#创建自己的tomcat" class="headerlink" title="创建自己的tomcat"></a>创建自己的tomcat</h6><pre class=" language-shell"><code class="language-shell">#准备好必要的文件[root@iZbp1gvmnu91bwmymqe146Z docker-tomcat-test]# lsapache-tomcat-8.5.55.tar.gz  Dockerfile  jdk-8u161-linux-x64.tar.gz  readme.txt</code></pre><pre class=" language-shell"><code class="language-shell">#编写镜像文件[root@iZbp1gvmnu91bwmymqe146Z docker-tomcat-test]# cat Dockerfile FROM centosMAINTAINER niejinquan<2224745432@qq.com>COPY readme.txt /usr/local/readme.txtADD jdk-8u161-linux-x64.tar.gz /usr/local/ADD apache-tomcat-8.5.55.tar.gz /usr/local/RUN yum -y install vim ENV MYPATH /usr/localWORKDIR $MYPATHENV JAVA_HOME /usr/local/jdk1.8.0_161ENV CLASSPATH $JAVA_HOME/bin/dt.jar:$JAVA_HOME/lib/tools.jarENV CATALINA_HOME /usr/local/apache-tomcat-8.5.55ENV CATALINA_BASH /usr/local/apache-tomcat-8.5.55ENV PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/binEXPOSE 8080CMD /usr/local/apache-tomcat-8.5.55/bin/startup.sh && tail -f /usr/local/apache-tomcat-8.5.55/logs/catalina.out</code></pre><pre class=" language-shell"><code class="language-shell">#运行tomcat[root@iZbp1gvmnu91bwmymqe146Z docker-tomcat-test]# docker run -d -p 9011:8080  --name njqtomcat -v /home/njq/build/tomcat/test:/usr/local/apache-tomcat-8.5.55/webapps/test -v /home/njq/tomcat/tomcatlogs/:/usr/local/apache-tomcat-8.5.55/logs diytomcat8d6c592646dd3e50f91ab4178bfa62ed75868c5776dcd065615987d48b4a86c9#进入docker[root@iZbp1gvmnu91bwmymqe146Z docker-tomcat-test]# docker exec -it 8d6c592646dd /bin/bash[root@8d6c592646dd local]# lsaegis  apache-tomcat-8.5.55  bin  etc  games  include  jdk1.8.0_161  lib  lib64  libexec  readme.txt  sbin  share  src</code></pre><h4 id="发布自己的镜像"><a href="#发布自己的镜像" class="headerlink" title="发布自己的镜像"></a>发布自己的镜像</h4><h6 id="发布到DockerHub"><a href="#发布到DockerHub" class="headerlink" title="发布到DockerHub"></a>发布到DockerHub</h6><p><a href="https://hub.docker.com/" target="_blank" rel="noopener">DockerHub地址</a></p><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z home]# docker login --helpUsage:    docker login [OPTIONS] [SERVER]Log in to a Docker registry.If no server is specified, the default is defined by the daemon.Options:  -p, --password string   Password      --password-stdin    Take the password from stdin  -u, --username string   Username</code></pre><pre class=" language-shell"><code class="language-shell">docker login -u njqconquerPassword: WARNING! Your password will be stored unencrypted in /root/.docker/config.json.Configure a credential helper to remove this warning. Seehttps://docs.docker.com/engine/reference/commandline/login/#credentials-storeLogin Succeeded</code></pre><pre class=" language-shell"><code class="language-shell">#解决push问题[root@iZbp1gvmnu91bwmymqe146Z home]# docker push niejinquan/diytomcat:1.0The push refers to repository [docker.io/niejinquan/diytomcat]An image does not exist locally with the tag: niejinquan/diytomcat#打tag   此处一定要和账号名字一致[root@iZbp1gvmnu91bwmymqe146Z home]# docker tag 991a6b3ca6d6 njqconquer/tomcat:1.0</code></pre><pre class=" language-shell"><code class="language-shell"># push   [root@iZbp1gvmnu91bwmymqe146Z home]# docker push njqconquer/tomcat:1.0The push refers to repository [docker.io/njqconquer/tomcat]1cfa029b8870: Pushing [=>                                                 ]  1.664MB/57.18MB466c6caff637: Pushing [=>                                                 ]  303.1kB/14.52MB1417f2b2f1b5: Pushing [>                                                  ]  1.061MB/384.5MBc815e6502087: Pushed eb29745b8228: Pushing [>                                                  ]  2.168MB/215.3MB</code></pre><h6 id="发布到阿里云镜像"><a href="#发布到阿里云镜像" class="headerlink" title="发布到阿里云镜像"></a>发布到阿里云镜像</h6><p>创建命名空间</p><p><img src="docker/1595413068175.png" alt="1595413068175"></p><p>操作步骤</p><p><img src="docker/1595413127240.png" alt="1595413127240"></p><p><img src="docker/1595413853199.png" alt="1595413853199"></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p><img src="docker/1595413966741.png" alt="1595413966741"></p><h2 id="五：Docker网络"><a href="#五：Docker网络" class="headerlink" title="五：Docker网络"></a>五：Docker网络</h2><h4 id="理解Docker0"><a href="#理解Docker0" class="headerlink" title="理解Docker0"></a>理解Docker0</h4><pre class=" language-shell"><code class="language-shell">ip addr #查看容器地址</code></pre><p><img src="docker/1595423655192.png" alt="1595423655192"></p><blockquote><p>三个网络，docker如何处理容器网络访问的？</p></blockquote><p><img src="docker/1595423935819.png" alt="1595423935819"></p><pre class=" language-shell"><code class="language-shell"> docker run -d -P --name tomcat01 tomcat #创建容器[root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it tomcat01 ip addr  1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00    inet 127.0.0.1/8 scope host lo       valid_lft forever preferred_lft forever86: eth0@if87: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc noqueue state UP group default     link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0       valid_lft forever preferred_lft forever#linux可以ping通[root@iZbp1gvmnu91bwmymqe146Z ~]# ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.064 ms64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.056 ms64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.052 ms</code></pre><blockquote><p>原理</p></blockquote><p>1、我们每启动一个docker容器，docker 就会给docker容器分配一个ip，我们只要安装了docker，就会有个网卡</p><p>docker0，桥接模式，使用的数据是 veth-pair 技术！</p><p>再次 ip addr</p><p><img src="docker/1595424341901.png" alt="1595424341901"></p><p>再次启动tomcat02,出现有一对网卡。</p><p><img src="docker/1595424702586.png" alt="1595424702586"></p><pre class=" language-shell"><code class="language-shell"># 我们发现这个容器带来网卡，都是一对一对的#veth-pair 就是一对的虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼次相连# 正因为有这个特性，evth-pair 充当一个桥梁，连接各种虚拟网络设备的# Openstack，Docker容器之间的连接，OVS的连接，都是使用，veth-pair 技术</code></pre><pre class=" language-shell"><code class="language-shell">#tomcat02可以ping通tomcat01[root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it tomcat02 ping 172.17.0.2PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.095 ms64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.059 ms64 bytes from 172.17.0.2: icmp_seq=3 ttl=64 time=0.054 ms</code></pre><p><img src="docker/1595425028755.png" alt="1595425028755"></p><p>结论：tomcat01和tomcat02 是公用额一个路由器，docker0</p><p>所有的容器不指定网络的情况下，都是docker0路由的，docker会给我们的容器分配一个默认的可用ip</p><p>255.255.0.1/16 域 局域网！</p><p><strong>000000.000000.000000.000000</strong></p><p><strong>255.255.255.255</strong></p><p><strong>255.255.0.0 255*255-1 = 65535</strong></p><p><img src="docker/1595425347699.png" alt="1595425347699"></p><blockquote><p>思考一个场景，我们编写一个微服务，database url=ip，项目不重启，数据库ip换掉了，我们希望可以处理这个问题，可以名字来进行访问容器？</p></blockquote><pre class=" language-shell"><code class="language-shell"># 如何解决呢# 通过 --link 既可以解决了网络连通问题 docker run -d -P --name  tomcat04  --link tomcat02  tomcat docker exec -it tomcat04 ping tomcat02</code></pre><p><img src="docker/1595426377951.png" alt="1595426377951"></p><p><img src="docker/1595426811819.png" alt="1595426811819"></p><pre class=" language-shell"><code class="language-shell">docker network inspect [root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it tomcat04 cat  /etc/hosts127.0.0.1    localhost::1    localhost ip6-localhost ip6-loopbackfe00::0    ip6-localnetff00::0    ip6-mcastprefixff02::1    ip6-allnodesff02::2    ip6-allrouters172.17.0.3    tomcat02 e33ef9bcdede172.17.0.4    7418d04c1dd7</code></pre><p>本地探究 –link 就是我们在hosts 配置中增加了一个 172.17.0.3    tomcat02 e33ef9bcdede</p><p>我们现在玩Docker 已经不建议使用 –link 了！</p><p>自定义网络！不知用docker0！</p><p>docker0问题：他不支持容器名连接访问！</p><h4 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h4><pre class=" language-shell"><code class="language-shell">#查看docker网路[root@iZbp1gvmnu91bwmymqe146Z ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPEfe5c2c2d1cb5        bridge              bridge              locald7ba5043a0f8        host                host                local711dec5c46cf        none                null                local</code></pre><p><strong>网络模式</strong></p><p>bridge ：桥接docker（默认的，自己创建也是用 bridge）</p><p>none： 不配置网络</p><p>host ： 和宿主机共享网络</p><p>container：容器网络连通！（用的少，局限大）</p><pre class=" language-shell"><code class="language-shell">#自己建一个网络配置[root@iZbp1gvmnu91bwmymqe146Z ~]# docker network create --driver bridge --subnet 192.168.0.0/16 --gateway 192.168.0.1 mynet4a0307c8649e23a77ff817116f951ebea82aeed4d8c4a178905e225b62c2bee9[root@iZbp1gvmnu91bwmymqe146Z ~]# docker network lsNETWORK ID          NAME                DRIVER              SCOPEfe5c2c2d1cb5        bridge              bridge              locald7ba5043a0f8        host                host                local4a0307c8649e        mynet               bridge              local711dec5c46cf        none                null                local</code></pre><p><img src="docker/1595467841774.png" alt="1595467841774"></p><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z ~]# dcoker run -d -P --name tomcat-net-01 --net mynet tomcat-bash: dcoker: command not found[root@iZbp1gvmnu91bwmymqe146Z ~]# docker run -d -P --name tomcat-net-01 --net mynet tomcat3a34b68cc970d04f0709775dc7052ea78e2132a73f4d0c7b2d3cb6b467586382[root@iZbp1gvmnu91bwmymqe146Z ~]# docker run -d -P --name tomcat-net-02 --net mynet tomcat250695b843ce7a49410cd2a8cd65fcc3f0b7d623ec58a2a410d5c73f0cf9daa0[root@iZbp1gvmnu91bwmymqe146Z ~]# docker network inspect mynet[    {        "Name": "mynet",        "Id": "4a0307c8649e23a77ff817116f951ebea82aeed4d8c4a178905e225b62c2bee9",        "Created": "2020-07-23T09:28:24.484089813+08:00",        "Scope": "local",        "Driver": "bridge",        "EnableIPv6": false,        "IPAM": {            "Driver": "default",            "Options": {},            "Config": [                {                    "Subnet": "192.168.0.0/16",                    "Gateway": "192.168.0.1"                }            ]        },        "Internal": false,        "Attachable": false,        "Ingress": false,        "ConfigFrom": {            "Network": ""        },        "ConfigOnly": false,        "Containers": {            "250695b843ce7a49410cd2a8cd65fcc3f0b7d623ec58a2a410d5c73f0cf9daa0": {                "Name": "tomcat-net-02",                "EndpointID": "eca5cf36f3d38b9e9963d62cedb326275beed5a25286ffb301bb9cd93ec78312",                "MacAddress": "02:42:c0:a8:00:03",                "IPv4Address": "192.168.0.3/16",                "IPv6Address": ""            },            "3a34b68cc970d04f0709775dc7052ea78e2132a73f4d0c7b2d3cb6b467586382": {                "Name": "tomcat-net-01",                "EndpointID": "a8161a7133a9689da33c03ae850542f21432b6ec066c72aeb63e9ec6208b2b03",                "MacAddress": "02:42:c0:a8:00:02",                "IPv4Address": "192.168.0.2/16",                "IPv6Address": ""            }        },        "Options": {},        "Labels": {}    }]</code></pre><pre class=" language-shell"><code class="language-shell">#测试[root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it tomcat-net-01 ping tomcat-net-02PING tomcat-net-02 (192.168.0.3) 56(84) bytes of data.64 bytes from tomcat-net-02.mynet (192.168.0.3): icmp_seq=1 ttl=64 time=0.058 ms</code></pre><blockquote><p>两个不同的网段能否ping通？？？</p></blockquote><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it tomcat01 ping tomcat-net-01ping: tomcat-net-01: Name or service not known</code></pre><p><img src="docker/1595468435840.png" alt="1595468435840"></p><p><strong>查看–help</strong></p><p><img src="docker/1595468467143.png" alt="1595468467143"></p><pre class=" language-shell"><code class="language-shell"># 测试打通 tomcat01 -mynet[root@MiWiFi-R3G-srv ~]# docker network connect mynet tomcat01# 连通之后就是将 tomcat01 放到了 mynet  网络下？# 一个容器两个ip地址！# 阿里云服务：公网ip 私网ip</code></pre><pre class=" language-shell"><code class="language-shell">[root@iZbp1gvmnu91bwmymqe146Z ~]# docker network connect mynet tomcat01[root@iZbp1gvmnu91bwmymqe146Z ~]# docker exec -it tomcat01 ping tomcat-net-01PING tomcat-net-01 (192.168.0.2) 56(84) bytes of data.64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=1 ttl=64 time=0.075 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=2 ttl=64 time=0.056 ms64 bytes from tomcat-net-01.mynet (192.168.0.2): icmp_seq=3 ttl=64 time=0.053 ms</code></pre><p><img src="docker/1595468934088.png" alt="1595468934088"></p><h4 id="实战测试：部署redis集群"><a href="#实战测试：部署redis集群" class="headerlink" title="实战测试：部署redis集群"></a>实战测试：部署redis集群</h4><h2 id="六：Docker-企业实战"><a href="#六：Docker-企业实战" class="headerlink" title="六：Docker 企业实战"></a>六：Docker 企业实战</h2><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><p>Docker<br>DockerFile build run手动操作，单个容器!<br>微服务。100个微服务!依赖关系。<br>Docker Compose来轻松高效的管理容器i。定义运行多个容器。</p><blockquote><p>官网介绍</p></blockquote><p>yuml文件</p><p>single command命令有哪些？</p><p>Compose is a tool for defining and running multi-container Docker applications. With Compose, you use a YAML file to configure your application’s services. Then, with a single command, you create and start all the services from your configuration. To learn more about all the features of Compose, see <a href="https://docs.docker.com/compose/#features" target="_blank" rel="noopener">the list of features</a>.</p><p>运行在所有环境上</p><p>Compose works in all environments: production, staging, development, testing, as well as CI workflows. You can learn more about each case in <a href="https://docs.docker.com/compose/#common-use-cases" target="_blank" rel="noopener">Common Use Cases</a>.</p><p>Using Compose is basically a three-step process:</p><ol><li>Define your app’s environment with a <code>Dockerfile</code> so it can be reproduced anywhere.</li><li>Define the services that make up your app in <code>docker-compose.yml</code> so they can be run together in an isolated environment.</li><li>Run <code>docker-compose up</code> and Compose starts and runs your entire app.</li></ol><p>docker-compose.yml文件示例</p><pre class=" language-shell"><code class="language-shell">version: '2.0'services:  web:    build: .    ports:    - "5000:5000"    volumes:    - .:/code    - logvolume01:/var/log    links:    - redis  redis:    image: redisvolumes:  logvolume01: {}</code></pre><blockquote><p>自己理解</p></blockquote><p>compose为开源项目，需要安装。</p><p>Compose :要的概念。</p><ul><li>服务services，容器。 应用。(web、 redis、 mysl…)</li><li>项目project。 -组关联的容器。 博客。web、mysql</li></ul><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><pre class=" language-shell"><code class="language-shell">sudo curl -L "https://github.com/docker/compose/releases/download/1.26.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose#国内地址curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` > /usr/local/bin/docker-composechmod +x /usr/local/bin/docker-compose</code></pre><h5 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h5><p>地址<a href="https://docs.docker.com/compose/gettingstarted/" target="_blank" rel="noopener">https://docs.docker.com/compose/gettingstarted/</a></p><p>docker-compose<br>以前都是单个docker run启动容器。<br>docker-compose。通过docker-compose编写yamI配置文件、可以通过compose -键启动所有服务，停止。!</p><p><strong>Docker小结</strong>:<br>1、Docker镜像。run=&gt;容器<br>2、DockerFile 构建镜像(服务打包)<br>3、docker-compose 启动项目(编排、多个微服务/环境)<br>4、Docker 网络! </p><h5 id="yuml规则"><a href="#yuml规则" class="headerlink" title="yuml规则"></a>yuml规则</h5><p>docker-compse.yuml 核心 <a href="https://docs.docker.com/compose/compose-file/" target="_blank" rel="noopener">https://docs.docker.com/compose/compose-file/</a></p><pre class=" language-shell"><code class="language-shell"># 3层  version: '' #版本  servcies:   #服务     服务1：   #服务配置      images:      build:      network:        ...     服务2：     ....     服务3：      ....#其他配置  网络/卷，全局规则  volumes:  networks:  configs:</code></pre><p>​    </p><h5 id="开源项目，搭建自己的博客"><a href="#开源项目，搭建自己的博客" class="headerlink" title="开源项目，搭建自己的博客"></a>开源项目，搭建自己的博客</h5><p><a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">https://docs.docker.com/compose/wordpress/</a></p><p>​    </p><h3 id="Docker-Swarm"><a href="#Docker-Swarm" class="headerlink" title="Docker Swarm"></a>Docker Swarm</h3><h3 id="CI-CD-Jenkins-流水线"><a href="#CI-CD-Jenkins-流水线" class="headerlink" title="CI/CD Jenkins 流水线"></a>CI/CD Jenkins 流水线</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法整理汇总（附代码）</title>
      <link href="/2020/03/11/sort-algorithms/"/>
      <url>/2020/03/11/sort-algorithms/</url>
      
        <content type="html"><![CDATA[<blockquote><p>关注公众号【算法码上来】，每日算法干货马上就来！</p></blockquote><p><img src="/medias/contact.jpg" alt=""></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文整理并总结了十大经典的排序算法（冒泡排序、选择排序、插入排序、快速排序、归并排序、希尔排序、计数排序、基数排序、桶排序、堆排序）的时间复杂度、空间复杂度等性质。</p><p><strong>本文并不会详细讲解每种排序算法的原理</strong>，网上有很多很好的教程，大家可以自己去搜了看。</p><p>最后我还亲自手写了十种排序算法的 c++ 代码，大家可以用来通过 <a href="https://leetcode-cn.com/problems/sort-an-array/" target="_blank" rel="noopener" title="LeetCode 912. 排序数组">LeetCode 912. 排序数组</a> 这道题。</p><h2 id="性质汇总"><a href="#性质汇总" class="headerlink" title="性质汇总"></a>性质汇总</h2><blockquote><p>如果发现表中有错误，请留言告知。</p></blockquote><table><thead><tr><th>算法</th><th>最好</th><th>最坏</th><th>平均</th><th>空间</th><th align="center">稳定性</th><th align="center">是否基于比较</th></tr></thead><tbody><tr><td>冒泡排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>选择排序</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>插入排序</td><td>$O(n)$</td><td>$O(n^2)$</td><td>$O(n^2)$</td><td>$O(1)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>快速排序</td><td>$O(n\log n)$</td><td>$O(n^2)$</td><td>$O(n\log n)$</td><td>$O(\log n)$~$O(n)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>归并排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n)$</td><td align="center">$\checkmark$</td><td align="center">$\checkmark$</td></tr><tr><td>希尔排序</td><td>$O(n^{1.3})$</td><td>$O(n^2)$</td><td>$O(n\log n)$~$O(n^2)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr><tr><td>计数排序</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>基数排序</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(nk)$</td><td>$O(n+k)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>桶排序</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n)$</td><td>$O(n+m)$</td><td align="center">$\checkmark$</td><td align="center">$\times$</td></tr><tr><td>堆排序</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(n\log n)$</td><td>$O(1)$</td><td align="center">$\times$</td><td align="center">$\checkmark$</td></tr></tbody></table><blockquote><p>如果表格显示有问题的话，还可以直接看下面的汇总图：</p></blockquote><h3 id="维基百科"><a href="#维基百科" class="headerlink" title="维基百科"></a>维基百科</h3><p>我觉得还是英文维基百科讲的比较详细、严谨。如果大家看的比较累的话，可以自己百度搜索相应的教程。</p><p><strong>冒泡排序</strong><br><a href="https://en.wikipedia.org/wiki/Bubble_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bubble_sort</a></p><p><strong>选择排序</strong><br><a href="https://en.wikipedia.org/wiki/Selection_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Selection_sort</a></p><p><strong>插入排序</strong><br><a href="https://en.wikipedia.org/wiki/Insertion_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Insertion_sort</a></p><p><strong>快速排序</strong><br><a href="https://en.wikipedia.org/wiki/Quicksort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Quicksort</a></p><p><strong>归并排序</strong><br><a href="https://en.wikipedia.org/wiki/Merge_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Merge_sort</a></p><p><strong>希尔排序</strong><br><a href="https://en.wikipedia.org/wiki/Shellsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Shellsort</a></p><p><strong>计数排序</strong><br><a href="https://en.wikipedia.org/wiki/Counting_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Counting_sort</a></p><p><strong>基数排序</strong><br><a href="https://en.wikipedia.org/wiki/Radix_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Radix_sort</a></p><p><strong>桶排序</strong><br><a href="https://en.wikipedia.org/wiki/Bucket_sort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Bucket_sort</a></p><p><strong>堆排序</strong><br><a href="https://en.wikipedia.org/wiki/Heapsort" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Heapsort</a></p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>所有的排序算法接口都是相同的，也就是 <code>vector&lt;int&gt; xxxSort(vector&lt;int&gt;&amp; nums)</code> 。只需要你传入一个 <code>vector&lt;int&gt;</code> 类型的数组，就能返回排序后的结果。</p><p>运行下来可以发现，桶排序速度是比较快的。而冒泡排序、选择排序和插入排序因为时间复杂度太高无法通过本题，基数排序因为无法处理负数也不能通过本题。</p><pre class=" language-cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortArray</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 冒泡排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bubbleSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token number">-2</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 选择排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">selectSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    idx <span class="token operator">=</span> j<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 插入排序（超时）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">insertSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 快速排序（24 ms）</span>    <span class="token keyword">void</span> <span class="token function">qSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">quickSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">qSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序（192 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span><span class="token punctuation">(</span>r<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> lnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> rnums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> rnums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token operator">-</span>l<span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>lnums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token operator">-</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>rnums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        nums <span class="token operator">=</span> <span class="token function">mSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 归并排序 + 非递归（80 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mergeSortNR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> len <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> len <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> l <span class="token operator">&lt;</span> n<span class="token operator">-</span>len<span class="token punctuation">;</span> l <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>len<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> l<span class="token operator">+</span>len<span class="token number">-1</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span> l<span class="token operator">+</span><span class="token number">2</span><span class="token operator">*</span>len<span class="token number">-1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> m<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token operator">-</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 希尔排序（40 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">shellSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> gap <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> gap <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> gap<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span> j<span class="token operator">-</span>gap <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">-</span><span class="token operator">=</span> gap<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 计数排序（32 ms）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> maxv<span class="token operator">-</span>minv<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> count<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token operator">+</span>minv<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 基数排序（不适用于负数）</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">radixSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxd <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxv <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            maxv <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            maxd<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">rank</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> base <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>maxd <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            count<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                count<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token operator">=</span> count<span class="token punctuation">[</span>i<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                rank<span class="token punctuation">[</span><span class="token operator">--</span>count<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">/</span>base<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> rank<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            maxd<span class="token operator">--</span><span class="token punctuation">;</span>            base <span class="token operator">*</span><span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 桶排序 (20 ms)</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">bucketSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">max_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> minv <span class="token operator">=</span> <span class="token operator">*</span><span class="token function">min_element</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> bs <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token punctuation">(</span>maxv<span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">></span> <span class="token function">bucket</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            bucket<span class="token punctuation">[</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>minv<span class="token punctuation">)</span><span class="token operator">/</span>bs<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> sz <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sz<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">{</span>                nums<span class="token punctuation">[</span>idx<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> bucket<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 堆排序（32 ms）</span>    <span class="token keyword">void</span> <span class="token function">adjust</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> p<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">int</span> c1 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c2 <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">*</span>p<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>c2<span class="token operator">&lt;</span>s <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>c2<span class="token punctuation">]</span><span class="token operator">></span>nums<span class="token punctuation">[</span>c1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> c2 <span class="token operator">:</span> c1<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>            p <span class="token operator">=</span> c<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">heapSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> n<span class="token number">-1</span><span class="token punctuation">;</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">adjust</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> nums<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 编程算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> leetcode </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
